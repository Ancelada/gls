#!/usr/bin/python
# -*- coding: utf8 -*-
from django.shortcuts import render, redirect
from django.http import HttpResponse, JsonResponse
from mainapp.models import Metka, Std0
from django.db.models import Q
import json
import requests
from django.http import StreamingHttpResponse
try:
	from urllib.request import urlopen
	from urllib.parse import urljoin
except ImportError:
	from urllib2 import urlopen	
	from urlparse import urljoin
import ssl
import datetime
# Create your views here.
def main(request):
	return render(request, 'metka.html')

def send_json_request(request):
	url = 'http://localhost:8000/recieve_json'
	data = {'data':[{'key1': 'val1'}, {'key2': 'val2'}]}
	headers = {'content-type': 'application/json'}
	r = requests.post(url, data=json.dumps(data), headers=headers)
	return redirect('/')

def recieve_json(request):
	if request.method == 'POST':
		Metka(text=json.loads(request.body)).save()



def send_simple_location_message(request):
	slmp = """LabR,Std0,0000,000000a8,34.071129,70.969948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0001,000000a9,34.081127,70.979950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0002,000000aa,34.091129,70.989944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0003,000000ab,34.101128,70.999947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0004,000000ac,34.111130,71.009949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0005,000000ad,34.121128,71.019951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0006,000000ae,34.131130,71.029945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0007,000000af,34.141129,71.039948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0008,000000b0,34.151131,71.049950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0009,000000b1,34.161129,71.059944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,000a,000000b2,34.171127,71.069946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,000b,000000b3,34.181129,71.079948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,000c,000000b4,34.191128,71.089951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,000d,000000b5,34.201130,71.099945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,000e,000000b6,34.211128,71.109947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,000f,000000b7,34.221130,71.119949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0010,000000b8,34.231129,71.129951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0011,000000b9,34.241127,71.139946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0012,000000ba,34.251129,71.149948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0013,000000bb,34.261127,71.159950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0014,000000bc,34.271130,71.169945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0015,000000bd,34.281128,71.179947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0016,000000be,34.291130,71.189949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0017,000000bf,34.301128,71.199951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0018,000000c0,34.311131,71.209946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0019,000000c1,34.321129,71.219948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,001a,000000c2,34.331127,71.229950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,001b,000000c3,34.341129,71.239944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,001c,000000c4,34.351128,71.249947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,001d,000000c5,34.361130,71.259949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,001e,000000c6,34.371128,71.269951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,001f,000000c7,34.381130,71.279945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0020,000000c8,34.391129,71.289948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0021,000000c9,34.401131,71.299950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0022,000000ca,34.411129,71.309944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0023,000000cb,34.421127,71.319946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0024,000000cc,34.431129,71.329948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0025,000000cd,34.441128,71.339951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0026,000000ce,34.451130,71.349945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0027,000000cf,34.461128,71.359947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0028,000000d0,34.471130,71.369949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0029,000000d1,34.481129,71.379951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,002a,000000d2,34.491127,71.389946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,002b,000000d3,34.501129,71.399948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,002c,000000d4,34.511127,71.409950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,002d,000000d5,34.521130,71.419945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,002e,000000d6,34.531128,71.429947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,002f,000000d7,34.541130,71.439949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0030,000000d8,34.551128,71.449951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0031,000000d9,34.561131,71.459946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0032,000000da,34.571129,71.469948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0033,000000db,34.581127,71.479950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0034,000000dc,34.591129,71.489944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0035,000000dd,34.601128,71.499947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0036,000000de,34.611130,71.509949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0037,000000df,34.621128,71.519951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0038,000000e0,34.631130,71.529945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0039,000000e1,34.641129,71.539948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,003a,000000e2,34.651131,71.549950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,003b,000000e3,34.661129,71.559944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,003c,000000e4,34.671127,71.569946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,003d,000000e5,34.681129,71.579948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,003e,000000e6,34.691128,71.589951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,003f,000000e7,34.701130,71.599945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0040,000000e8,34.711128,71.609947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0041,000000e9,34.721130,71.619949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0042,000000ea,34.731129,71.629951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0043,000000eb,34.741127,71.639946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0044,000000ec,34.751129,71.649948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0045,000000ed,34.761127,71.659950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0046,000000ee,34.771130,71.669945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0047,000000ef,34.781128,71.679947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0048,000000f0,34.791130,71.689949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0049,000000f1,34.801128,71.699951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,004a,000000f2,34.811131,71.709946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,004b,000000f3,34.821129,71.719948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,004c,000000f4,34.831127,71.729950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,004d,000000f5,34.841129,71.739944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,004e,000000f6,34.851128,71.749947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,004f,000000f7,34.861130,71.759949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0050,000000f8,34.871128,71.769951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0051,000000f9,34.881130,71.779945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0052,000000fa,34.891129,71.789948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0053,000000fb,34.901131,71.799950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0054,000000fc,34.911129,71.809944,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0055,000000fd,34.921127,71.819946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0056,000000fe,34.931129,71.829948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0057,000000ff,34.941128,71.839951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0058,00000100,34.951130,71.849945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0059,00000101,34.961128,71.859947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,005a,00000102,34.971130,71.869949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,005b,00000103,34.981129,71.879951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,005c,00000104,34.991127,71.889946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,005d,00000105,35.001129,71.899948,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,005e,00000106,35.011127,71.909950,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,005f,00000107,35.021130,71.919945,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0060,00000108,35.031128,71.929947,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0061,00000109,35.041130,71.939949,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0062,0000010a,35.051128,71.949951,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000
LabR,Std0,0063,0000010b,35.061131,71.959946,6.803710,7,2016-01-12T10:34:16:317+3,2,0038,0000"""
	url = 'http://localhost:8000/receive_slmp'
	r = requests.post(url, data=slmp)
	return redirect('/')


def receive_slmp(request):
	if request.method == 'POST':
		line = request.body.decode('utf-8')
		end__date = datetime.datetime.now()- datetime.timedelta(minutes=15)
		start__date = datetime.datetime.now() - datetime.timedelta(hours=256)
		queryset = Metka.objects.filter(DateImport__range=(start__date, end__date)).delete()
		Metka(text=line, DateImport=datetime.datetime.now()).save();
		return HttpResponse('ok')
	return HttpResponse('ok')

def save_slmp(request):
	if request.method == 'POST':
		queryset = list(Std0.objects.raw("""
			select *, max(DateImport) as Date from Metka
			where readed is null"""))
		try:
			line = queryset[0].text.decode('utf-8')
			end__date = datetime.datetime.now()- datetime.timedelta(minutes=15)
			start__date = datetime.datetime.now() - datetime.timedelta(hours=256)
			queryset = Std0.objects.filter(DateImport__range=(start__date, end__date)).delete()
		except:
			return HttpResponse('Nothing to parse')
		line = line.split('Zone')
		if (len(line) > 1):
			Metka(text=line[2].replace('\n', '')).save()
			line = line[2]
			line = line.split(',')
			Std0(LabD=line[0], Std0=line[1], Tag_ID_Format=line[2], Tag_ID=line[3], X=line[4], Y=line[5], Z=line[6], Zone=line[7], DateImport=datetime.datetime.now()).save()

			#отметка что данная пачка распарсена
			mrk = queryset[0].DateImport
			a = Metka.objects.filter(DateImport=mrk).update(readed=True)
			return HttpResponse('received')
		else:
			line = line[0].split('\n')
			for i in line:
				try:
					line = i.split(',')
					Std0(LabD=line[0], Std0=line[1], Tag_ID_Format=line[2], Tag_ID=line[3], X=line[4], Y=line[5], Z=line[6], Zone=line[7], Timestamp=line[8], DateImport=datetime.datetime.now()).save()
					#отметка что данная пачка распарсена
					mrk = queryset[0].DateImport
					a = Metka.objects.filter(DateImport=mrk).update(readed=True)
				except:
					return HttpResponse('received')
		return HttpResponse('received')

def landscape(request):
	return render(request, 'landscape.html')

def getxyzvalues(request):
	if request.method == 'POST':
		queryset = list(Std0.objects.raw("""
			select *, max(DateImport) as Date from Std0
			group by Tag_ID
			"""))
		Str = ''
		num = 0
		for tag_id in queryset:
			if num < len(queryset) - 1:
				Str += '(Tag_ID="%s" and DateImport="%s") or ' %(tag_id.Tag_ID, tag_id.Date)
			else:
				Str += '(Tag_ID="%s" and DateImport="%s")' %(tag_id.Tag_ID, tag_id.Date)
			num+=1
		Str = Str.replace('"', "'")
		queryset2 = list(Std0.objects.raw("""
			select * from Std0
			where %s
			""" % Str))
		marks = {}
		num = 0
		for i in queryset2:
			spisok = []
			spisok.append({'tag_id':i.Tag_ID, 'x': i.X, 'y': i.Y, 'z': i.Z})
			marks[num] = spisok
			num+=1
	return JsonResponse(marks)

def movement(request):
	return render(request, 'movement.html')

def children(request):
	return render(request, 'children.html')

def delete(request):

	return HttpResponse (len(queryset))